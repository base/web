import{u as r,j as e}from"./index-Dlxm52NL.js";const i={title:"Paymaster & Bundler Errors",sidebar_label:"Errors",slug:"paymaster-errors"};function s(l){const t={a:"a",code:"code",div:"div",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...r(),...l.components};return e.jsxs(e.Fragment,{children:[e.jsx(t.p,{children:"Learn about Paymaster & Bundler error codes and how to resolve them."}),`
`,e.jsxs(t.p,{children:["If the error you're encountering persists, please join the ",e.jsx(t.a,{href:"https://discord.com/invite/cdp",children:"Coinbase Developer Platform Discord"})," and contact us in ",e.jsx(t.code,{children:"#paymaster"})," for assistance."]}),`
`,e.jsxs(t.h2,{id:"paymaster-error-codes",children:["Paymaster Error Codes",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#paymaster-error-codes",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Below are a list of common error codes returned by the Paymaster."}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Error"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Code"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INTERNAL_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32000"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Internal error. Something is wrong with our service. Please contact support if this persists."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"UNAUTHORIZED_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32001"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Unauthorized. Check if your API key and RPC URL are valid."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"DENIED_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32001"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Request denied. This may be due to the gas policy you configured in the Paymaster page. Check the values in your gas policy."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"UNAVAILABLE_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32003"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Service unavailable. Please contact support if this persists."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"GAS_ESTIMATION_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32004"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An error occurred during eth_estimateUserOperation. This is typically due to insufficient gas, or an invalid paymaster signature."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"METHOD_NOT_FOUND"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32601"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Method not found. Check if Paymaster is enabled on your RPC URL, and if you're sending the correct JSON-RPC method."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INVALID_ARGUMENT"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32602"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Invalid argument. Ensure you have the correct parameters in the UserOperation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"PARSE_ERROR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32700"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Parse error. Ensure you have the correct parameters in the UserOperation, and that the request body is formatted properly."})]})]})]}),`
`,e.jsxs(t.h2,{id:"paymaster-gas-policy-errors",children:["Paymaster Gas Policy Errors",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#paymaster-gas-policy-errors",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Message"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"rejected due to max per user op spend limit exceeded"}),e.jsx(t.td,{style:{textAlign:"left"},children:"UserOperation cost too large - configure Per UserOperation limit."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"rejected due to max monthly org spend limit"}),e.jsx(t.td,{style:{textAlign:"left"},children:"over max monthly spend - contact us to increase your limit."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"rejected due to max global usd spend limit reached"}),e.jsx(t.td,{style:{textAlign:"left"},children:"over configured max total USD - adjust your policy."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"rejected due to maximum per address transaction count reached"}),e.jsx(t.td,{style:{textAlign:"left"},children:"per sender address maximum number of txn sponsored reached."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"rejected due to maximum per address sponsorship reached"}),e.jsx(t.td,{style:{textAlign:"left"},children:"per sender address maximum USD sponsorship reached."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"attestation not found for address"}),e.jsx(t.td,{style:{textAlign:"left"},children:"sender address does not have required attestation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"target address not in allowed contracts"}),e.jsx(t.td,{style:{textAlign:"left"},children:"contract allowlist - invalid address called."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"method not in allowed methods"}),e.jsx(t.td,{style:{textAlign:"left"},children:"contract allowlist - wrong method called on allowed contract."})]})]})]}),`
`,e.jsxs(t.h2,{id:"bundler-error-codes",children:["Bundler Error Codes",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#bundler-error-codes",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Below are a list of common error codes returned by the Bundler. These will typically be accompanied by an Entrypoint Error Code (defined below)."}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Error"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Code"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"REJECTED_BY_EP_OR_ACCOUNT"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32500"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction was rejected by the EP or account."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"REJECTED_BY_PAYMASTER"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32501"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction was rejected by the Paymaster."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"BANNED_OPCODE"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32502"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction contains a banned opcode."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"SHORT_DEADLINE"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32503"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction deadline is too short."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"BANNED_OR_THROTTLED_ENTITY"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32504"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The entity is banned or throttled."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INVALID_ENTITY_STAKE"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32505"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The entity stake is invalid."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INVALID_AGGREGATOR"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32506"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The aggregator is invalid."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INVALID_SIGNATURE"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32507"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction signature is invalid."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"EXECUTION_REVERTED"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32521"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction execution was reverted."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"INVALID_FIELDS"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-32602"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction contains invalid fields."})]})]})]}),`
`,e.jsxs(t.h2,{id:"entrypoint-error-codes",children:["Entrypoint Error Codes",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#entrypoint-error-codes",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Below are a list of common error codes returned by the Entry Point."}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Error"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA10 sender already constructed"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The sender was already created, so initCode should be empty. Remove the initCode."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA13 initCode failed or OOG"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The initCode failed to create the account or ran out of gas. Additionally, check the verificationGasLimit field in your UserOperation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA14 initCode must return sender"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The initCode fails to provide the sender address. Verify either the initCode or the factory contract for potential issues."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA15 initCode must create sender"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The initCode within the UserOperation fails to generate an account. Please inspect the initCode or the factory contract for potential issues."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA20 Account not deployed"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The smart account has not been deployed, and no initCode was specified. If this is the initial transaction for this account, ensure that an initCode is included."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA21 didn’t pay prefund"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The transaction was rejected by the EP or account. Check that the account has enough ETH to pay for the UserOperation, or that the Paymaster is configured properly."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA23 reverted (or OOG)"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The signature of the UserOperation was rejected or ran out of gas. Check if you have sufficient ETH for gas, or that the Paymaster is configured properly."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA24 Signature error"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The signature of the UserOperation is invalid. Check that the UserOperation hash, entrypoint address, and chain ID are correct."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA25 Invalid account nonce"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The nonce is invalid. The UserOperation is using an old nonce, or the nonce is improperly formatted."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA40 Over verification gas limit"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The verification gas limit has been surpassed. Check the verificationGasLimit field in your UserOperation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA41 Too little verification gas"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Verifying the UserOperation did not complete due to insufficient gas. You may need to increase verificationGasLimit."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA50 PostOp reverted"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The execution of additional logic by the EntryPoint resulted in a revert."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"AA51 prefund below actualGasCost"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The actual cost of the UserOperation is higher than the total amount of gas approved."})]})]})]}),`
`,e.jsxs(t.h2,{id:"request-logs",children:["Request Logs",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#request-logs",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(t.p,{children:["Request Logs for UserOps can be downloaded under the Logs tab on the Paymaster page. These logs are useful for debugging errors or auditing sponsored UserOps. Click on ",e.jsx(t.code,{children:"Download CSV"})," to download a CSV of successful and failed requests."]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Column"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"OrganizationId"}),e.jsx(t.td,{style:{textAlign:"left"},children:"ID of your Cloud Developer Platform Organization."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"ProjectId"}),e.jsx(t.td,{style:{textAlign:"left"},children:"ID of your Cloud Developer Platform Project."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"Network"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Network for the request. Either base or base-sepolia."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"Status"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Status of the request. Either completed, in progress or failed."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"UserOpHash"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Hash of the UserOperation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"Sender"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Account making the UserOperation."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"Paymaster"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Contract/service that sponsors UserOperation gas (making transactions free to end user)."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"TransactionHash"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Transaction hash that the UserOperation was included in."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"GasCost"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Cost of gas in Gwei."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"GasUsed"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Amount of gas used * the gas cost."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"Method"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Method called by the request."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"ErrorCode"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Error code for failed requests."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"ErrorMessage"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Error message for failed requests."})]})]})]})]})}function d(l={}){const{wrapper:t}={...r(),...l.components};return t?e.jsx(t,{...l,children:e.jsx(s,{...l})}):s(l)}export{d as default,i as frontmatter};

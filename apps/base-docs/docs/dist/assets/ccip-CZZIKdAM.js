import{a3 as b,Q as k,q as O}from"./waitForTransactionReceipt-DqmUmnvq.js";import{B as l,bI as m,F as y,y as E,bJ as h,i as L}from"./OnchainKitProvider-BMiQl1rP.js";import{i as x}from"./isAddressEqual-DsE_vq1q.js";import"./index-Dlxm52NL.js";import"./parseAbi-DHKPviCp.js";class M extends l{constructor({callbackSelector:r,cause:a,data:o,extraData:i,sender:f,urls:t}){var n;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(n=a.metaMessages)!=null&&n.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(d=>`    ${m(d)}`)],`  Sender: ${f}`,`  Data: ${o}`,`  Callback selector: ${r}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class R extends l{constructor({result:r,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${m(a)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class S extends l{constructor({sender:r,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const P="0x556f1830",$={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function j(c,{blockNumber:r,blockTag:a,data:o,to:i}){const{args:f}=b({data:o,abi:[$]}),[t,n,d,p,s]=f,{ccipRead:e}=c,w=e&&typeof(e==null?void 0:e.request)=="function"?e.request:q;try{if(!x(i,t))throw new S({sender:t,to:i});const u=await w({data:d,sender:t,urls:n}),{data:g}=await k(c,{blockNumber:r,blockTag:a,data:E([p,O([{type:"bytes"},{type:"bytes"}],[u,s])]),to:i});return g}catch(u){throw new M({callbackSelector:p,cause:u,data:o,extraData:s,sender:t,urls:n})}}async function q({data:c,sender:r,urls:a}){var i;let o=new Error("An unknown error occurred.");for(let f=0;f<a.length;f++){const t=a[f],n=t.includes("{data}")?"GET":"POST",d=n==="POST"?{data:c,sender:r}:void 0,p=n==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r).replace("{data}",c),{body:JSON.stringify(d),headers:p,method:n});let e;if((i=s.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await s.json()).data:e=await s.text(),!s.ok){o=new h({body:d,details:e!=null&&e.error?y(e.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!L(e)){o=new R({result:e,url:t});continue}return e}catch(s){o=new h({body:d,details:s.message,url:t})}}throw o}export{q as ccipRequest,j as offchainLookup,$ as offchainLookupAbiItem,P as offchainLookupSignature};

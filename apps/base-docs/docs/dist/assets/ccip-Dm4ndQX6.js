import{B as l,g as h,s as y,d as k,i as b,c as O,a as E,e as L,H as m,b as x}from"./sub-accounts-DojVtldO.js";import"./index-Dlxm52NL.js";import"./Address-Db7MZz8P.js";import"./OnchainKitProvider-BMiQl1rP.js";import"./attestations-CryG6VVa.js";import"./useValue-BadCClMc.js";import"./useOnchainKit-BS9QuBF4.js";import"./parseAbi-DHKPviCp.js";import"./secp256k1-B-O1ujgT.js";import"./clsx.m-DHulAg21.js";class M extends l{constructor({callbackSelector:s,cause:t,data:o,extraData:i,sender:p,urls:a}){var n;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],(n=t.metaMessages)!=null&&n.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(d=>`    ${h(d)}`)],`  Sender: ${p}`,`  Data: ${o}`,`  Callback selector: ${s}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class R extends l{constructor({result:s,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${h(t)}`,`Response: ${y(s)}`],name:"OffchainLookupResponseMalformedError"})}}class S extends l{constructor({sender:s,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${s}`],name:"OffchainLookupSenderMismatchError"})}}const B="0x556f1830",$={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function _(c,{blockNumber:s,blockTag:t,data:o,to:i}){const{args:p}=k({data:o,abi:[$]}),[a,n,d,f,r]=p,{ccipRead:e}=c,g=e&&typeof(e==null?void 0:e.request)=="function"?e.request:T;try{if(!b(i,a))throw new S({sender:a,to:i});const u=await g({data:d,sender:a,urls:n}),{data:w}=await O(c,{blockNumber:s,blockTag:t,data:E([f,L([{type:"bytes"},{type:"bytes"}],[u,r])]),to:i});return w}catch(u){throw new M({callbackSelector:f,cause:u,data:o,extraData:r,sender:a,urls:n})}}async function T({data:c,sender:s,urls:t}){var i;let o=new Error("An unknown error occurred.");for(let p=0;p<t.length;p++){const a=t[p],n=a.includes("{data}")?"GET":"POST",d=n==="POST"?{data:c,sender:s}:void 0,f=n==="POST"?{"Content-Type":"application/json"}:{};try{const r=await fetch(a.replace("{sender}",s).replace("{data}",c),{body:JSON.stringify(d),headers:f,method:n});let e;if((i=r.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await r.json()).data:e=await r.text(),!r.ok){o=new m({body:d,details:e!=null&&e.error?y(e.error):r.statusText,headers:r.headers,status:r.status,url:a});continue}if(!x(e)){o=new R({result:e,url:a});continue}return e}catch(r){o=new m({body:d,details:r.message,url:a})}}throw o}export{T as ccipRequest,_ as offchainLookup,$ as offchainLookupAbiItem,B as offchainLookupSignature};
